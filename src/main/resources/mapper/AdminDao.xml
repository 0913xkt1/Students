<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Mapper 3.0" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.xkt.students_project_spring_boot.dao.AdminDao">
    <resultMap type="com.xkt.students_project_spring_boot.domain.Admin" id="admin">
        <result column="admin_id" jdbcType="INTEGER" property="adminID"/>
        <result column="login_autority" jdbcType="INTEGER" property="loginAutority"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
    </resultMap>
    <resultMap type="com.xkt.students_project_spring_boot.domain.Notice" id="notice">
        <result column="notice_id" jdbcType="INTEGER" property="noticeId"/>
        <result column="notice_date" jdbcType="TIMESTAMP" property="noticeDate"/>
        <result column="notice_title" jdbcType="VARCHAR" property="noticeTitle"/>
        <result column="notice_body" jdbcType="VARCHAR" property="noticeBody"/>
        <result column="notice_type" jdbcType="VARCHAR" property="noticeType"/>
        <result column="author" jdbcType="VARCHAR" property="author"/>
        <result column="class_id" jdbcType="INTEGER" property="classId"/>
    </resultMap>

    <resultMap id="student" type="com.xkt.students_project_spring_boot.domain.Student">
        <result column="stu_id" jdbcType="INTEGER" property="stuId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="class_id" jdbcType="INTEGER" property="classId"/>
        <result column="grade" jdbcType="VARCHAR" property="grade"/>
        <result column="dorm_id" jdbcType="INTEGER" property="dormId"/>
        <result column="single_parent" jdbcType="INTEGER" property="singleParent"/>
        <result column="subsidy" jdbcType="INTEGER" property="subsidy"/>
        <result column="patriarch_id" jdbcType="INTEGER" property="patriarchId"/>
        <result column="stu_name" jdbcType="VARCHAR" property="stuName"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
    </resultMap>

    <resultMap id="patriarch" type="com.xkt.students_project_spring_boot.domain.Patriarch">
        <result column="pat_id" jdbcType="INTEGER" property="patId"/>
        <result column="pat_name" jdbcType="VARCHAR" property="patName"/>
        <result column="sex" jdbcType="VARCHAR" property="sex"/>
        <result column="cell_phone_number" jdbcType="VARCHAR" property="cellPhoneNumber"/>
        <result column="login_autority" jdbcType="INTEGER" property="loginAutority"/>
        <result column="stu_id" jdbcType="INTEGER" property="stuId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
    </resultMap>

    <resultMap id="teacher" type="com.xkt.students_project_spring_boot.domain.Teacher">
        <result column="teacher_id" jdbcType="INTEGER" property="teacherId"/>
        <result column="password" jdbcType="VARCHAR" property="password"/>
        <result column="autority" jdbcType="INTEGER" property="autority"/>
        <result column="grade" jdbcType="VARCHAR" property="grade"/>
        <result column="login_autority" jdbcType="INTEGER" property="loginAutority"/>
        <result column="teacher_name" jdbcType="VARCHAR" property="teacherName"/>


    </resultMap>
<!--    管理员登录-->
    <select id="findByIdAndByPassword" resultMap="admin">
        select *  from admin where admin_id = #{adminID} and password = #{password}
    </select>

    <select id="findNoticeAll" resultMap="notice">
    select *  from notice
    </select>

    <!-- 了解的内容：抽取重复的sql语句-->
    <sql id="defaultUser">
        select * from user
    </sql>
<!--批量删除公告-->
    <delete id="deleteBathesNotice">
        <!-- select * from user where id in (1,2,3,4,5); -->
         delete from notice where notice_id in

            <foreach collection="array" open="( " close=")" item="notice_id"  separator=",">
                #{notice_id}
            </foreach>

    </delete>
<!--    删除公告-->
    <delete id="deleteNotice">
     delete from notice where notice_id = #{noticeId}
    </delete>
<!--    添加公告-->
    <insert id="insertNoter" parameterType="com.xkt.students_project_spring_boot.domain.Notice">
        insert into notice(notice_date,notice_title,notice_body,notice_type,author)
        values (now(),#{noticeTitle},#{noticeBody},#{noticeType},#{author})
    </insert>
<!--    添加学生-->
    <insert id="addStudent" parameterType="com.xkt.students_project_spring_boot.domain.Student">
        insert into student(stu_id,password,class_id,grade,dorm_id,single_parent,
                            subsidy,patriarch_id,stu_name,sex)
        values (#{stuId},#{password},#{classId},#{grade},#{dormId},
                #{singleParent},#{subsidy},#{patriarchId},#{stuName},#{sex})
    </insert>
<!--    添加家长-->
    <insert id="addPatriarch" parameterType="com.xkt.students_project_spring_boot.domain.Patriarch">
        insert into patriarch(pat_id,pat_name,stu_id,sex,cell_phone_number,
                            password)
        values (#{patId},#{patName},#{stuId},#{sex},#{cellPhoneNumber},
                #{password})
    </insert>
<!--    添加教师-->
    <insert id="addTeacher" parameterType="com.xkt.students_project_spring_boot.domain.Teacher">
        insert into teacher(teacher_id,password,autority,grade,teacher_name)
        values (#{teacherId},#{password},#{autority},#{grade},#{teacherName})
    </insert>
<!--查看学生是否存在-->
    <select id="selectStudentId" parameterType="int" resultType="String">
    select password  from student where stu_id = #{stuId}
    </select>
    <!--查看家长是否存在-->
    <select id="selectPatriarch" parameterType="int" resultType="String">
    select password  from patriarch where stu_id = #{stuId}
    </select>
    <!--查看教师是否存在-->
    <select id="selectTeacher" parameterType="int" resultType="String">
    select password  from teacher where stu_id = #{stuId}
    </select>

<!--    查看所有学生用户-->
    <select id="findStudentAll" resultMap="student">
    select *  from student where login_autority = 2
    </select>
    <!--    查看所有教师用户-->
    <select id="findTeacherAll" resultMap="teacher">
    select *  from teacher where login_autority = 3
    </select>
    <!--    查看所有家长用户-->
    <select id="findPatriarchAll" resultMap="patriarch">
    select *  from patriarch where login_autority = 4
    </select>
    <!--    查看所有已注销学生用户-->
    <select id="findRuinStudentAll" resultMap="student">
    select *  from student where login_autority = 0
    </select>
    <!--    查看所有已注销教师用户-->
    <select id="findRuinTeacherAll" resultMap="teacher">
    select *  from teacher where login_autority = 0
    </select>
    <!--    查看所有已注销家长用户-->
    <select id="findRuinPatriarchAll" resultMap="patriarch">
    select *  from patriarch where login_autority = 0
    </select>
<!--批量删除学生-->
    <delete id="deleteStudents">
        <!-- select * from user where id in (1,2,3,4,5); -->
        delete from student where login_autority = 0 and stu_id in

        <foreach collection="array" open="( " close=")" item="stu_id"  separator=",">
            #{stu_id}
        </foreach>

    </delete>
    <!--    删除学生-->
    <delete id="deleteStudent">
     delete from student where login_autority = 0 and stu_id in = #{stu_id}
    </delete>
<!--    批量注销学生-->
    <update id="logoutStudents">
        update student set login_autority = 0
        where stu_id in
        <foreach collection="array" open="( " close=")" item="stu_id"  separator=",">
            #{stu_id}
        </foreach>
    </update>
<!--    注销学生-->
    <update id="logoutStudent">
        update student set login_autority = 0
        where stu_id = #{stu_id}
    </update>
<!--    批量取消注销学生-->
    <update id="revocerStudents">
        update student set login_autority = 2
        where stu_id in
        <foreach collection="array" open="( " close=")" item="stu_id"  separator=",">
            #{stu_id}
        </foreach>
    </update>
<!--    取消注销学生-->
    <update id="revocerStudent">
        update student set login_autority = 2
        where stu_id = #{stu_id}
    </update>

    <!--批量删除家长-->
    <delete id="deletePatriarchs">
        <!-- select * from user where id in (1,2,3,4,5); -->
        delete from patriarch where login_autority = 0 and pat_id in

        <foreach collection="array" open="( " close=")" item="pat_id"  separator=",">
            #{pat_id}
        </foreach>

    </delete>
    <!--    删除家长-->
    <delete id="deletePatriarch">
     delete from patriarch where login_autority = 0 and pat_id in = #{pat_id}
    </delete>
    <!--    批量注销家长-->
    <update id="logoutPatriarchs">
        update patriarch set login_autority = 0
        where pat_id in
        <foreach collection="array" open="( " close=")" item="pat_id"  separator=",">
            #{pat_id}
        </foreach>
    </update>
    <!--    注销家长-->
    <update id="logoutPatriarch">
        update patriarch set login_autority = 0
        where pat_id = #{pat_id}
    </update>
    <!--    批量取消注销家长-->
    <update id="revocerPatriarchs">
        update patriarch set login_autority = 2
        where pat_id in
        <foreach collection="array" open="( " close=")" item="pat_id"  separator=",">
            #{pat_id}
        </foreach>
    </update>
    <!--    取消注销家长-->
    <update id="revocerPatriarch">
        update patriarch set login_autority = 2
        where pat_id = #{pat_id}
    </update>


    <!--批量删除教师-->
    <delete id="deleteTeachers">
        <!-- select * from user where id in (1,2,3,4,5); -->
        delete from teacher where login_autority = 0 and teacher_id in

        <foreach collection="array" open="( " close=")" item="teacher_id"  separator=",">
            #{teacher_id}
        </foreach>

    </delete>
    <!--    删除教师-->
    <delete id="deleteTeacher">
     delete from teacher where login_autority = 0 and teacher_id in = #{teacher_id}
    </delete>
    <!--    批量注销教师-->
    <update id="logoutTeachers">
        update teacher set login_autority = 0
        where teacher_id in
        <foreach collection="array" open="( " close=")" item="teacher_id"  separator=",">
            #{teacher_id}
        </foreach>
    </update>
    <!--    注销教师-->
    <update id="logoutTeacher">
        update teacher set login_autority = 0
        where teacher_id = #{teacher_id}
    </update>
    <!--    批量取消注销教师-->
    <update id="revocerTeachers">
        update teacher set login_autority = 2
        where teacher_id in
        <foreach collection="array" open="( " close=")" item="teacher_id"  separator=",">
            #{teacher_id}
        </foreach>
    </update>
    <!--    取消注销教师-->
    <update id="revocerTeacher">
        update teacher set login_autority = 2
        where teacher_id = #{teacher_id}
    </update>
    <!--    更改学生密码-->
    <update id="updateStudentPassword">
        update student set stu_id = #{stuId}
        where password = #{password}
    </update>
    <!--    更改教师密码-->
    <update id="updateTeacherPassword">
        update teacher set teacher_id = #{teacher_id}
        where password = #{password}
    </update>
    <!--    更改家长密码-->
    <update id="updatePatriarchPassword">
        update patriarch set pat_id = #{pat_id}
        where password = #{password}
    </update>
<!--更改教师权限-->
    <update id="teacherAutority">
        update teacher set autority = #{autority}
        where teacher_id = #{teacher_id}
    </update>

</mapper>
